- name: Assertions
  assert:
    that:
      - k8s_primary_master_name is defined
      - k8s_node_type is defined
  tags: [never, apply, delete]


- name: Get Helm releases
  shell: >
    helm list --namespace {{ k8s_prometheus_namespace }} -o yaml
  when:
    - inventory_hostname == k8s_primary_master_name
  register: _helm_releases
  tags: [never, apply, delete]


- name: Set Prometheus status
  set_fact:
    k8s_prometheus_status: "{{ (_helm_releases.stdout | from_yaml | selectattr('name', 'equalto', k8s_prometheus_release) | list)[0].status | default('') }}"
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply, delete]


- name: Delete Prometheus
  shell: |
    helm delete {{ k8s_prometheus_release }} --namespace {{ k8s_prometheus_namespace }}
  register: _delete_k8s_prometheus
  when:
    - inventory_hostname == k8s_primary_master_name
    - k8s_prometheus_status == "deployed"
  tags: [never, delete]


- name: Create Prometheus Helm values file
  tempfile:
    state: file
  register: _prometheus_values
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply]


- name: Template Prometheus Helm values file
  template:
    src: values.yml.j2
    dest: "{{ _prometheus_values.path }}"
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply]


- name: Apply Prometheus
  shell: >
    helm {% if k8s_prometheus_status == "deployed" %} upgrade {% else %} install {% endif %}
    {{ k8s_prometheus_release }} {{ k8s_prometheus_chart }} --repo {{ k8s_prometheus_repository }}
    --namespace {{ k8s_prometheus_namespace }} -f {{ _prometheus_values.path }}
  when:
    - inventory_hostname == k8s_primary_master_name
  tags: [never, apply]
